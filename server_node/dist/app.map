{"version":3,"sources":["app.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,UAAA,aAAA,QAAA,SAAA,CAAA,CAAA;AACA,IAAA,SAAA,aAAA,QAAA,WAAA,CAAA,CAAA;AACA;AAEA,IAAM,MAAM,SAAZ;AAEA,IAAM,SAAS,IAAI,MAAJ,CAAW,IAAX,CAAf;AAEA;AAEA,IAAM,KAAK,OAAO,MAAP,EAAe,EAAE,aAAa,KAAf,EAAffile":"app.map","sourceRoot":"..","sourcesContent":["import * as express from 'express';\nimport * as socket from 'socket.io';\n// import { loadSet } from 'set';\n\nconst app = express();\n\nconst server = app.listen(4001);\n\n// app.use(express.static('../client/dist'));\n\nconst io = socket(server, { serveClient: false });\n//\n// interface Users {\n//   [id: string]: {\n//     name: string;\n//     points: number;\n//   };\n// }\n//\n// interface State {\n//   [roomName: string]: {\n//     users: Users;\n//     gameType?: string;\n//     gameState?: {\n//       deck: string[];\n//       board: string[];\n//       numberOfSets: number;\n//       previousSelection?: {\n//         user: string;\n//         valid: boolean;\n//         selection: string[];\n//       };\n//     }\n//   };\n// }\n// var state: State = {};\n// let set: any;\n// loadSet((GeneralSet: any) => {\n//   set = GeneralSet.new(4, 3);\n// });\n//\n// function emitUsers(roomName: string, users: Users) {\n//   const userKeys = Object.keys(users);\n//   const userValues = userKeys.map((v) =>  users[v]);\n//   io.sockets.in(roomName).emit('users', userValues);\n// }\n//\n// io.on('connection', (client) => {\n//   client.on('joinRoom', function(payload: {roomName: string, username: string}) {\n//     const user = { name: payload.username, points: 0 };\n//     if (!state[payload.roomName]) {\n//       state[payload.roomName] = { users: {} };\n//     }\n//     state[payload.roomName].users[client.id] = user;\n//\n//     client.join(payload.roomName);\n//\n//     emitUsers(payload.roomName, state[payload.roomName].users);\n//   });\n//\n//   client.on('setGameType', function (payload: {roomName: string, gameType: string}) {\n//     if (state[payload.roomName].gameState !== undefined) {\n//       return;\n//     }\n//     state[payload.roomName].gameType = payload.gameType;\n//     io.sockets.in(payload.roomName).emit('setGameType', payload.gameType);\n//   });\n//\n//   client.on('startGame', function (payload: {roomName: string }) {\n//     const deck = set.init_deck();\n//     const updatedBoard = set.update_board(deck, '');\n//     const gameState = {\n//       deck: updatedBoard.get_deck().split(','),\n//       board: updatedBoard.get_board().split(','),\n//       numberOfSets: updatedBoard.sets\n//     };\n//     state[payload.roomName].gameState = gameState;\n//     io.sockets.in(payload.roomName).emit('updateGame', gameState);\n//   });\n//\n//   client.on('verifySet', function (payload: {roomName: string, selected: string[] }) {\n//     // check for set\n//     const isValidSet = set.is_set(payload.selected.join(','));\n//     if (!isValidSet) {\n//       state[payload.roomName].users[client.id].points -= 1;\n//       emitUsers(payload.roomName, state[payload.roomName].users);\n//       const gameState = state[payload.roomName].gameState;\n//       if (gameState === undefined) {\n//         return;\n//       }\n//       io.sockets.in(payload.roomName).emit(\n//         'updateGame',\n//         {...gameState, previousSelection: {\n//           user: state[payload.roomName].users[client.id].name,\n//           valid: false,\n//           selection: payload.selected,\n//         }}\n//       );\n//       return;\n//     }\n//\n//     const gameState = state[payload.roomName].gameState;\n//     if (gameState === undefined) {\n//       return;\n//     }\n//\n//     // Set found\n//     const newBoard = gameState.board;\n//     payload.selected.forEach((id) => {\n//       newBoard.splice(newBoard.indexOf(id), 1);\n//     });\n//\n//     const updatedBoard = set.update_board(gameState.deck.join(','), newBoard.join(','));\n//     state[payload.roomName].users[client.id].points += 1;\n//     state[payload.roomName].gameState = {\n//       deck: updatedBoard.get_deck().split(','),\n//       board: updatedBoard.get_board().split(','),\n//       numberOfSets: updatedBoard.sets,\n//       previousSelection: {\n//         user: state[payload.roomName].users[client.id].name,\n//         valid: true,\n//         selection: payload.selected,\n//       }\n//     };\n//\n//     io.sockets.in(payload.roomName).emit('updateGame', state[payload.roomName].gameState);\n//     emitUsers(payload.roomName, state[payload.roomName].users);\n//   });\n//\n// });\n"]}